The binary insertion sort algorithm consistently performed worse than the insertion sort utilizing a linked list. From the graph, we observe that for lists below size 8000 there is not a significant difference in performance between the two algorithms. However, after surpassing 8000 elements the binary insertion algorithm starts to perform significantly worse than the insertion sort utilizing linked list. The time it takes for the binary insertion sort to complete grows exponentially as the number of elements increases while the time it takes for the insertion sort using a linked list to complete grows linearly. This has to do with the fundamental difference between a linked list and a vector. When a element in a vector is inserted or deleted, the computer must shift every single element after the insertion of deletion point which takes up a significant amount of time, especially when the vector contains thousands of elements. When an element from a linked list is inserted or deleted the algorithm only has to iterate over the list to find the insertion or deletion point and then perform the insertion and deletion. The iteration and deletion of an element in a linked list can be done quickly, in a constant amount of time while the iteration is done in exponential amount of time. This process of iterating and then inserting is significantly faster than the process of shifting every single element in the list after the insertion or deletion point. Hence, Insertion sort using linked list is faster than binary insertion sort using a vector.